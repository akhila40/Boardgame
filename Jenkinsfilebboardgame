pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage('Hello') {
            steps {
                git branch: 'main', url: 'https://github.com/basava1139/Boardgame.git'
            }
        }
        
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                 sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectNAme=BoardGame -Dsonar.projectKey=BoardGame \
                 -Dsonar.java.binaries=. '''
              }
            }
        }
        
        
        stage('Build') {
            steps {
              sh "mvn package"
            }
        }
        
        stage('Publish to nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                         sh "mvn deploy -DskipTest=true -Doverwrite=true "
                  }
                }
            }
        
        
        stage('docker build') {
            steps {
              script {
                  withDockerRegistry(credentialsId: 'docky', toolName: 'docker') {
                     sh "docker build -t basu1139/docky ."
                     sh "docker tag  basu1139/docky basu1139/docky:Latest"
                     sh "docker push  basu1139/docky:Latest"
                  }
              }
            }
        }
       
       
       stage('deploy to kubernetes') {
            steps {
             withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.81.110:6443') {
                sh "kubectl apply -f deployment-service.yaml"
            }
         }
        }
        stage('verify the deploments') {
            steps {
             withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.81.110:6443') {
                sh "kubectl get pods -n webapps"
                sh "kubectl get svc -n webapps"
            }
        }
        }
        
    }
}
